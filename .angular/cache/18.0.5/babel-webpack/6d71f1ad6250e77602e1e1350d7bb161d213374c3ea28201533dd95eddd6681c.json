{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class OlympicService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.olympicUrl = './assets/mock/olympi.json';\n    this.olympics$ = new BehaviorSubject(undefined);\n  }\n  loadInitialData() {\n    return this.http.get(this.olympicUrl).pipe(tap(value => this.olympics$.next(value)), catchError((error, caught) => {\n      // TODO: improve error handling\n      console.error(error);\n      // can be useful to end loading state and let the user know something went wrong\n      //this.olympics$.next(null);\n      return this.router.navigateByUrl(`nodata`);\n      // faire redirections à la place des trois lignes précédentes\n    }));\n  }\n  getOlympics() {\n    return this.olympics$.asObservable();\n  }\n  static #_ = this.ɵfac = function OlympicService_Factory(t) {\n    return new (t || OlympicService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OlympicService,\n    factory: OlympicService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","catchError","tap","OlympicService","constructor","http","router","olympicUrl","olympics$","undefined","loadInitialData","get","pipe","value","next","error","caught","console","navigateByUrl","getOlympics","asObservable","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["/home/gildas/Documents/8 - Dév/Formation OC Fullstack Java Angular/Projets/Projet 2 - Angular/Git/front/src/app/core/services/olympic.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OlympicService {\n  private olympicUrl = './assets/mock/olympi.json';\n  private olympics$ = new BehaviorSubject<any>(undefined);\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  loadInitialData() {\n    return this.http.get<any>(this.olympicUrl).pipe(\n      tap((value) => this.olympics$.next(value)),\n      catchError((error, caught) => {\n        // TODO: improve error handling\n        console.error(error);\n\n        // can be useful to end loading state and let the user know something went wrong\n        //this.olympics$.next(null);\n        return this.router.navigateByUrl(`nodata`);\n        // faire redirections à la place des trois lignes précédentes\n      })\n    );\n  }\n\n  getOlympics() {\n    return this.olympics$.asObservable();\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;AACtC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAMhD,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAH5C,KAAAC,UAAU,GAAG,2BAA2B;IACxC,KAAAC,SAAS,GAAG,IAAIR,eAAe,CAAMS,SAAS,CAAC;EAEQ;EAE/DC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAM,IAAI,CAACJ,UAAU,CAAC,CAACK,IAAI,CAC7CV,GAAG,CAAEW,KAAK,IAAK,IAAI,CAACL,SAAS,CAACM,IAAI,CAACD,KAAK,CAAC,CAAC,EAC1CZ,UAAU,CAAC,CAACc,KAAK,EAAEC,MAAM,KAAI;MAC3B;MACAC,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;MAEpB;MACA;MACA,OAAO,IAAI,CAACT,MAAM,CAACY,aAAa,CAAC,QAAQ,CAAC;MAC1C;IACF,CAAC,CAAC,CACH;EACH;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACX,SAAS,CAACY,YAAY,EAAE;EACtC;EAAC,QAAAC,CAAA,G;qBAvBUlB,cAAc,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdzB,cAAc;IAAA0B,OAAA,EAAd1B,cAAc,CAAA2B,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}