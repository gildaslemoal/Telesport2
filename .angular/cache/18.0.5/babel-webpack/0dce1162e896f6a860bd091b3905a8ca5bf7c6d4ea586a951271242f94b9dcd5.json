{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let OlympicService = /*#__PURE__*/(() => {\n  class OlympicService {\n    constructor(http) {\n      this.http = http;\n      this.olympicUrl = './assets/mock/olympic.json';\n      this.olympics$ = new BehaviorSubject(undefined);\n    }\n    loadInitialData() {\n      return this.http.get(this.olympicUrl).pipe(tap(value => this.olympics$.next(value)), catchError((error, caught) => {\n        // TODO: improve error handling\n        console.error(error);\n        // can be useful to end loading state and let the user know something went wrong\n        this.olympics$.next(null);\n        return caught;\n      }));\n    }\n    getOlympics() {\n      return this.olympics$.asObservable();\n    }\n    static #_ = this.ɵfac = function OlympicService_Factory(t) {\n      return new (t || OlympicService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OlympicService,\n      factory: OlympicService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return OlympicService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}